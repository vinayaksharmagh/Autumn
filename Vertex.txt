#version 430 core

const float PI= 22.0/7;

vec4 v_pos[4] =vec4[4](
vec4(0.1,-0.1,0,1),
vec4(0.1,0.1,0,1),
vec4(-0.1,-0.1,0,1),
vec4(-0.1,0.1,0,1)
);

vec2 t_pos[4]=vec2[4](
	vec2(1,0),
	vec2(1,1),
	vec2(0,0),
	vec2(0,1)
);

layout (location=0) in int i;//index of array to be used is sent via uniform

struct st_live
{
	vec3 offset;
	float pad1;
	
	vec3 scale;
	float pad2;

	float ang;
	float pad3;
	float pad4;
	float pad5;


	
};



layout(std140, binding=3) uniform live //uniform block which contains object of struct st_live as its member
{
	st_live l_obj[400];
};


struct st_matrix//Since both members are mat4 so we don't need to worry about padding
{
	mat4 M_proj;
	mat4 M_view;
//	mat4 M_tr;
};

layout(std140,binding=4) uniform matrix
{
	st_matrix m_obj;

};


	mat4 M_translate = {vec4(1,0,0,0),
	vec4(0,1,0,0),
	vec4(0,0,1,0),
	vec4(l_obj[i].offset.x, l_obj[i].offset.y, l_obj[i].offset.z,1)
	};


	mat4 M_scale = {vec4(l_obj[i].scale.x,0,0,0),
	vec4(0,l_obj[i].scale.y,0,0),
	vec4(0,0,l_obj[i].scale.z,0),
	vec4(0,0,0,1)
	};

	
	
	mat4 M_rotate={vec4(cos(l_obj[i].ang),-sin(l_obj[i].ang),0,0),
	vec4(sin(l_obj[i].ang),cos(l_obj[i].ang),0,0),
	vec4(0,0,1,0),
	vec4(0,0,0,1)};



out tex_io//name of in/out block stays same but name of object can differ(usually depending weather its at input or output end)
{
	vec2 tex_pos;
	flat int tex_index;//flat qualifier is used to prevent interpolation of quantity while reaching fragment shader
}tex_out;


void main()
{	

	mat4 M_comp= M_scale*M_translate*M_rotate;
	
	gl_Position= m_obj.M_proj*m_obj.M_view*M_comp*v_pos[gl_VertexID];

	tex_out.tex_pos = t_pos[gl_VertexID];
	tex_out.tex_index = i%5;



	m_obj;
	l_obj;
}


